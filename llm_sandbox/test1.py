from llama_index.core import Document
from llama_index.core import VectorStoreIndex, SimpleDirectoryReader
from llama_index.vector_stores.chroma import ChromaVectorStore
from llama_index.core import StorageContext
from llama_index.llms.openai import OpenAI
from llama_index.embeddings.openai import OpenAIEmbedding
from llama_index.core import Settings
from llama_index.core.query_engine import RouterQueryEngine
from llama_index.core.query_engine import SubQuestionQueryEngine
from llama_index.core.tools import QueryEngineTool, ToolMetadata
from llama_index.core.selectors import PydanticSingleSelector
from llama_index.core.agent.workflow import FunctionAgent
from llama_index.agent.openai import OpenAIAgent
from llama_index.storage.chat_store.postgres import PostgresChatStore
from llama_index.core.memory import ChatMemoryBuffer
from llama_index.program.openai import OpenAIPydanticProgram
from llama_index.tools.database import DatabaseToolSpec
import chromadb
from pydantic import BaseModel
from typing import Optional, Any, List
from datetime import datetime

user_info = '''
"first_name": "–ê—Ä—Ç–µ–º",
"last_name": "–ú–æ—Ç–æ–≤–∏–ª–æ–≤",
"email": "artem174a@icloud.com",
"phone": "+79227301825",
"card_id": "2020000000037721",
"created_at": "2025-04-11T09:20:11.000000Z"
"telegram_id": "843774957"
"user_gk_id": "37721"

Is_auth: False
'''

main_info = f'''
–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y.%m.%d %H:%M')}

–î–æ—Å—Ç—É–ø–Ω—ã–µ callback_data:
- halls:cities - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤ —Å –±–∏–∑–Ω–µ—Å-–∑–∞–ª–∞–º–∏
- passes - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É –ø—Ä–æ—Ö–æ–¥–æ–≤ (–±–∏–ª–µ—Ç–æ–≤)
- services:main - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—Å–ª—É–≥–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
- profile - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- qr - –ø–µ—Ä–µ—Ö–æ–¥ –∫ QR-–∫–æ–¥—É
- orders - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
- sessions - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–≤
- halls:city:city_gk_id - –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (city_gk_id - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞ [–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä golden key –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –ø—Ä–µ—Ñ–∏–∫c gk_])
- halls:details:hall_gk_id - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ª–µ (hall_gk_id - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ª–∞ [–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä golden key –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –ø—Ä–µ—Ñ–∏–∫c gk_])
- ignore - –ø—É—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è)
'''

SYSTEM_PROMPT = f'''
–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ –±–∏–∑–Ω–µ—Å –∑–∞–ª–∞—Ö (–∫–æ–º–ø–∞–Ω–∏—è Golden Key). –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏.
–ü–æ–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏:
- qr –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∑–∞–ª
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ª—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ—Ä–æ–¥–µ (—É—Ç–æ—á–Ω–∏ –≥–æ—Ä–æ–¥ –∏ –Ω–∞–π–¥–∏ –∑–∞–ª –≤ –±–∞–∑–µ)
- —Ä–∞–∑–¥–µ–ª –±–∏–ª–µ—Ç–æ–≤/–ø—Ä–æ—Ö–æ–¥–æ–≤ (callback_data='passes' —Ç–∞–º —É–∫–∞–∑–∞–Ω–∞ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å)
- –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ú–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ (—Ç–∞–±–ª–∏—Ü—ã: users [–ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—å telegramm], gk_users [–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ GoldenKey])
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ (–ø—Ä–æ–º–æ–∫–æ–¥—ã)
- –∏—Å—Ç–æ—Ä–∏—è –≤–∏–∑–∏—Ç–æ–≤
- –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:
{user_info}

–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
{main_info}

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
1. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Å—Ç—Ä–æ–≥–æ–º JSON-—Ñ–æ—Ä–º–∞—Ç–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ
2. –ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ä–∞–∑–º–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –≤ –ø–æ–ª—è—Ö, –≥–¥–µ —ç—Ç–æ —É–∫–∞–∑–∞–Ω–æ
3. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ üòä
4. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
5. –†–∞–∑–¥–µ–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏
6. –î–æ–±–∞–≤–ª—è–π –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏!

–ì–¥–µ –±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
–¢–∞–±–ª–∏—Ü–∞ "halls": —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ª–∞—Ö, –≤–∫–ª—é—á–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ, –≥–æ—Ä–æ–¥, –∞–¥—Ä–µ—Å, –æ–ø–∏—Å–∞–Ω–∏–µ, —É—Å–ª—É–≥–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è, —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ.

–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:
1. –ù–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–ª–æ–≤:
{{
    "response": {{
        "answer": "–í –ú–æ—Å–∫–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-–∑–∞–ª–æ–≤",
        "buttons": [
            {{
                "callback_data": "halls:cities",
                "text": "–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥"
            }}
        ]
    }}
}}
'''

llm = OpenAI(
    model="gpt-4.1-nano", 
    temperature=0.1, 
    api_base='https://api.aitunnel.ru/v1/', 
    api_key='sk-aitunnel-C0Wxd5TZVf96WJwjJHLBWZKcM4SE2URI'
)
embed_model = OpenAIEmbedding(
    model="text-embedding-3-large", 
    embed_batch_size=100, 
    api_base='https://api.aitunnel.ru/v1/', 
    api_key='sk-aitunnel-C0Wxd5TZVf96WJwjJHLBWZKcM4SE2URI'
)

Settings.llm = llm
Settings.embed_model = embed_model

remote_db = chromadb.HttpClient()
collection = remote_db.get_or_create_collection("main_collection_0")

docs = SimpleDirectoryReader(input_dir='data').load_data()

vector_store = ChromaVectorStore(chroma_collection=collection)
storage_context = StorageContext.from_defaults(vector_store=vector_store)

# index = VectorStoreIndex.from_documents(
#     docs, storage_context=storage_context, embed_model=embed_model
# )
index = VectorStoreIndex.from_vector_store(vector_store, embed_model=embed_model)

chat_store = PostgresChatStore.from_uri(
    uri="postgresql://default:Alisa220!@localhost:5432/default",
)
chat_memory = ChatMemoryBuffer.from_defaults(
    token_limit=3000,
    chat_store=chat_store,
    chat_store_key="user10",
)

engine = index.as_query_engine(
    similarity_top_k=3
    )

query_engine_tools = [
    QueryEngineTool(
        query_engine=engine,
        metadata=ToolMetadata(
            name="vector_info",
            description=(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å –∑–∞–ª–∞—Ö –∏ –ø—Ä–æ—Ö–æ–¥–∞—Ö/—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–ª—ã"
                "Use a detailed plain text question as input to the tool."
            ),
        ),
    )
]

db_tools = DatabaseToolSpec(
    scheme="postgresql",
    host="localhost",  # Database Host
    port="5432",  # Database Port
    user="default",  # Database User
    password="Alisa220!",  # Database Password
    dbname="bot_db",  # Database Name
)

tools = db_tools.to_tool_list()

agent = OpenAIAgent.from_tools(
    tools, 
    verbose=True,
    memory_cls=chat_memory,
    system_prompt=SYSTEM_PROMPT
)

agent.chat_repl()